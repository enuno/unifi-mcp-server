name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate version tag
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Valid version tag: ${{ github.ref }}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual release triggered for version: ${{ github.event.inputs.version }}"
          else
            echo "Invalid version tag format. Expected: v*.*.*"
            exit 1
          fi

      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git rev-parse "${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Tag ${{ github.event.inputs.version }} already exists"
            exit 1
          fi

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ -m "not integration" --cov=src --cov-report=xml

      - name: Run linting
        run: |
          source .venv/bin/activate
          black --check src/ tests/
          ruff check src/ tests/

      - name: Build Python package
        run: |
          source .venv/bin/activate
          uv pip install build
          python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: meta
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/(.*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="latest"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Extract metadata for Docker
        id: docker-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
        continue-on-error: true  # Don't fail if Dockerfile doesn't exist yet

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/(.*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="latest"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "First release - no previous tag found"
            CHANGELOG="## Initial Release"
          else
            echo "Generating changelog from $PREV_TAG to ${{ steps.version.outputs.version }}"
            CHANGELOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Save changelog to file
          cat > CHANGELOG.tmp << EOF
          ## What's Changed

          $CHANGELOG

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ steps.version.outputs.version }}

          ## Docker Image

          \`\`\`bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          \`\`\`

          ## Installation

          ### Via pip

          \`\`\`bash
          pip install unifi-mcp-server==${{ steps.version.outputs.version }}
          \`\`\`

          ### Via uv

          \`\`\`bash
          uv pip install unifi-mcp-server==${{ steps.version.outputs.version }}
          \`\`\`
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: CHANGELOG.tmp
          draft: false
          prerelease: false
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/unifi-mcp-server
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
        continue-on-error: true  # Don't fail if package not configured yet

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi]
    if: always()
    steps:
      - name: Create release summary
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GitHub Release | ${{ needs.create-release.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| PyPI Publish | ${{ needs.publish-pypi.result }} |" >> $GITHUB_STEP_SUMMARY
