name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Mondays at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['python']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run Safety check
        run: |
          source .venv/bin/activate
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit
        run: |
          source .venv/bin/activate
          pip install pip-audit
          pip-audit --format json --output pip-audit-report.json
        continue-on-error: true

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('safety-report.json') != ''
        with:
          name: safety-report
          path: safety-report.json
          if-no-files-found: ignore

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('pip-audit-report.json') != ''
        with:
          name: pip-audit-report
          path: pip-audit-report.json
          if-no-files-found: ignore

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install detect-secrets
        run: pip install detect-secrets

      - name: Run detect-secrets scan
        run: |
          detect-secrets scan --baseline .secrets.baseline --all-files
        continue-on-error: true

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        if: github.event_name == 'pull_request'
        with:
          path: ./
          base: ${{ github.event.pull_request.base.sha }}
          head: ${{ github.event.pull_request.head.sha }}
          extra_args: --debug --only-verified

  bandit-scan:
    name: Bandit Security Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv pip install -e ".[dev]"

      - name: Run Bandit
        run: |
          source .venv/bin/activate
          bandit -r src/ -f json -o bandit-report.json -ll -ii
        continue-on-error: true

      - name: Run Bandit SARIF
        run: |
          source .venv/bin/activate
          pip install bandit[sarif]
          bandit -r src/ -f sarif -o bandit-results.sarif -ll -ii
        continue-on-error: true

      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('bandit-results.sarif') != ''
        with:
          sarif_file: bandit-results.sarif
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-full-report
          path: bandit-report.json

  trivy-scan:
    name: Trivy Security Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy JSON report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-report
          path: trivy-report.json

  docker-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: unifi-mcp-server:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

      - name: Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        if: success()
        with:
          image-ref: 'unifi-mcp-server:scan'
          format: 'sarif'
          output: 'trivy-docker-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-docker-results.sarif'
        continue-on-error: true

  osv-scanner:
    name: OSV Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v1.9.0
        with:
          scan-args: |-
            --recursive
            --format sarif
            --output osv-results.sarif
            ./
        continue-on-error: true

      - name: Upload OSV Scanner results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: osv-results.sarif
        continue-on-error: true

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, secret-scanning, bandit-scan, trivy-scan, docker-scan, osv-scanner]
    if: always()
    steps:
      - name: Check scan results
        run: |
          echo "CodeQL: ${{ needs.codeql.result }}"
          echo "Dependency Scan: ${{ needs.dependency-scan.result }}"
          echo "Secret Scanning: ${{ needs.secret-scanning.result }}"
          echo "Bandit: ${{ needs.bandit-scan.result }}"
          echo "Trivy: ${{ needs.trivy-scan.result }}"
          echo "Docker Scan: ${{ needs.docker-scan.result }}"
          echo "OSV Scanner: ${{ needs.osv-scanner.result }}"

      - name: Create security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scanner | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scanning | ${{ needs.secret-scanning.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Bandit | ${{ needs.bandit-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy FS | ${{ needs.trivy-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Scan | ${{ needs.docker-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| OSV Scanner | ${{ needs.osv-scanner.result }} |" >> $GITHUB_STEP_SUMMARY
